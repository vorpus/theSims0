class Template {
  static processTextplate(txtfile) {
    let maxWidth = 0;
    let txtarr = txtfile.split("\n").map((line) => {
      const onlyLine = line.trim();
      if (onlyLine.length > maxWidth) {
        maxWidth = onlyLine.length;
      }
      return onlyLine;
    });
    return this.txtArrToTemplate(txtarr, maxWidth);
  }

  static txtArrToTemplate(txtarr, maxWidth) {
    const templateArr = new Array(txtarr.length);
    txtarr.forEach((line, idx) => {
      templateArr[idx] = [];
      for (let i = 0; i < maxWidth; i++) {
        if (line[i] === "O") {
          templateArr[idx].push(1);
        } else {
          templateArr[idx].push(0)
        }
      }
    });
    return templateArr;
  }

  static dot () {
    return [
      [1]
    ];
  }

  static block () {
    return [
      [1,1],
      [1,1]
    ]
  }

  static beehive () {
    return [
      [0,1,1,0],
      [1,0,0,1],
      [0,1,1,0]
    ]
  }

  static pentadecathlon () {
    return [
      [0,0,1,0,0,0,0,1,0,0],
      [1,1,0,1,1,1,1,0,1,1],
      [0,0,1,0,0,0,0,1,0,0]
    ]
  }

  static pulsar () {
    return [
      [0,0,1,1,1,0,0,0,1,1,1,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,1,0,1,0,0,0,0,1],
      [1,0,0,0,0,1,0,1,0,0,0,0,1],
      [1,0,0,0,0,1,0,1,0,0,0,0,1],
      [0,0,1,1,1,0,0,0,1,1,1,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,1,1,1,0,0,0,1,1,1,0,0],
      [1,0,0,0,0,1,0,1,0,0,0,0,1],
      [1,0,0,0,0,1,0,1,0,0,0,0,1],
      [1,0,0,0,0,1,0,1,0,0,0,0,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,1,1,1,0,0,0,1,1,1,0,0]
    ]
  }

  static p16 () {
    return [
      [0,0,1,1,1,0,0,0,1,1,1,0,0],
      [0,1,0,0,0,1,0,1,0,0,0,1,0],
      [0,1,0,0,0,1,0,1,0,0,0,1,0],
      [1,0,1,1,1,1,0,1,1,1,1,0,1],
      [1,1,0,0,0,0,0,0,0,0,0,1,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,1,0,1,1,0,0,0,0],
      [0,0,0,1,0,1,0,1,0,1,0,0,0],
      [0,0,0,0,1,0,0,0,1,0,0,0,0]
    ]
  }

  static lightweightspaceship () {
    return [
      [0,1,0,0,1],
      [1,0,0,0,0],
      [1,0,0,0,1],
      [1,1,1,1,0]
    ];
  }

  static glider () {
    return [
      [1,0,0],
      [0,1,1],
      [1,1,0]
    ];
  }


  static c10orthogonal () {
    return [
      [0,1,1,0,0,1,1,0],
      [0,0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0,0],
      [1,0,1,0,0,1,0,1],
      [1,0,0,0,0,0,0,1],
      [0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,1],
      [0,1,1,0,0,1,1,0],
      [0,0,1,1,1,1,0,0],
      [0,0,0,0,0,0,0,0],
      [0,0,0,1,1,0,0,0],
      [0,0,0,1,1,0,0,0],
    ];
  }

  static glidergun () {
    return [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
      [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
      [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ];
  }

  static b52bomber () {
    return this.processTextplate(
      `....OOOOOO
      ..OO.....O
      OO.O.....O
      ....O...O
      ......O
      ......OO
      .....OOOO
      .....OO.OO
      .......OO`
    );
  }

  static backrake1 () {
    return this.processTextplate(
      `.....OOO...........OOO
        ....O...O.........O...O
        ...OO....O.......O....OO
        ..O.O.OO.OO.....OO.OO.O.O
        .OO.O....O.OO.OO.O....O.OO
        O....O...O..O.O..O...O....O
        ............O.O
        OO.......OO.O.O.OO.......OO
        ............O.O
        ......OOO.........OOO
        ......O...O.........O
        ......O.O....OOO
        ............O..O....OO
        ...............O
        ...........O...O
        ...........O...O
        ...............O
        ............O.O`
    );
  }
  static canadagoose () {
    return this.processTextplate(
      `OOO
      O.........OO
      .O......OOO.O
      ...OO..OO
      ....O
      ........O
      ....OO...O
      ...O.O.OO
      ...O.O..O.OO
      ..O....OO
      ..OO
      ..OO`
    );
  }
  static bentkeys () {
    return this.processTextplate(
      `.O........O
      O.O......O.O
      .O.OO..OO.O
      ....O..O
      ....O..O`
    );
  }
  static diamondring () {
    return this.processTextplate(
      `......O
      .....O.O
      ....O.O.O
      ....O...O
      ..OO..O..OO
      .O....O....O
      O.O.OO.OO.O.O
      .O....O....O
      ..OO..O..OO
      ....O...O
      ....O.O.O
      .....O.O
      ......O`
    );
  }

  static vacuum () {
    return this.processTextplate(
      `.OO.......................OO
        .OO.......................O
        ........................O.O
        ...............OO.......OO
        OO.............O.O
        OO.............O.OO
        ................OO
        ................O
        ............................................OO
        ................O...........................OO
        ................OO
        OO.............O.OO.............O...O
        OO.............O.O.............O.....O.......OO
        ...............OO..............O.............OO
        ...............................OO...O
        .OO..............................OOO
        .OO
        .................................OOO
        ...............................OO...O
        ...............................O.............OO
        ...............................O.....O.......OO
        ................................O...O

        ............................................OO
        ............................................OO




        .....................................OO
        .....................................O.O.......OO
        .......................................O.......OO
        .....................................OOO
        ......................O.O
        .....................OOO
        .....................OOO
        .....................O...............OOO
        .........................O.O...........O
        .....................OO....O.........O.O
        ................OO....O...OO.........OO
        ...............O.O......O
        ...............O
        ..............OO`
    );
  }

  static bigun () {
    return this.processTextplate(
      `...........O
      ..........OO
      .........OO
      ..........OO..OO
      ......................................O
      ......................................OO........OO
      .......................................OO.......OO
      ..........OO..OO..................OO..OO
      OO.......OO
      OO........OO
      ...........O
      ..................................OO..OO
      .......................................OO
      ......................................OO
      ......................................O`
    );
  }
  static eater () {
    return this.processTextplate(
      `OO
      O.O
      ..O
      ..OO`
    );
  }
  static quadpseudo () {
    return this.processTextplate(
      `........OO
      ...OO.O..O
      ...O.OO.O
      ........OO
      ...O.OO...O
      .OOO.OO.OO
      O.......O
      .OOO.OO.O
      ...O.O.O`
    );
  }
}

module.exports = Template;
